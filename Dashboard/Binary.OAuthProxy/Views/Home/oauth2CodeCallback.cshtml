@model Binary.Models.oauth2CodeCallbackModel

@{
    ViewBag.Title = "Home Page";
}

<script>
    var authData = {};

    @if (String.IsNullOrEmpty(Model.Res))
    {
    @:authData = getHashParams();
    }
    else
    {
    @:authData = @Html.Raw(Model.Res);
    }

    var binary = new BinaryClient();
    binary.SetAuthInfo(authData);

    top.postMessage(JSON.stringify(
    {
        data: authData,
        apiMethod: 'token'
    }), '*');
    //window.close();

    function getHashParams() {

        var hashParams = {};
        var e,
            a = /\+/g,  // Regex for replacing addition symbol with a space
            r = /([^&;=]+)=?([^&;]*)/g,
            d = function (s) { return decodeURIComponent(s.replace(a, " ")); },
            q = window.location.hash.substring(1);

        while (e = r.exec(q))
            hashParams[d(e[1])] = d(e[2]);

        return hashParams;
    }
</script>


